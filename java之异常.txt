三种类型的异常：
  检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。
  运行时异常： 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。
  错误： 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。
  
  
Exception 类的层次
  所有的异常类是从 java.lang.Exception 类继承的子类。
  Exception 类是 Throwable 类的子类。除了Exception类外，Throwable还有一个子类Error 。
  Java 程序通常不捕获错误。错误一般发生在严重故障时，它们在Java程序处理的范畴之外。
  Error 用来指示运行时环境发生的错误。
  例如，JVM 内存溢出。一般地，程序不会从错误中恢复。
  异常类有两个主要的子类：IOException 类和 RuntimeException 类。
  
error---错误 ： 是指程序无法处理的错误，表示应用程序运行时出现的重大错误。例如jvm运行时出现的OutOfMemoryError以及Socket编程时出现的端口占用等程序无法处理的错误。
Exception --- 异常 ：异常可分为运行时异常跟编译异常

throws表示一个方法声明可能抛出一个异常，定义在函数上。
throw表示此处抛出一个已定义的异常，定义在函数内。

try{
  // 程序代码
}catch(异常类型1 异常的变量名1){
  // 程序代码
}catch(异常类型2 异常的变量名2){
  // 程序代码
}finally{
  // 程序代码
}
无论是否发生异常，finally 代码块中的代码总会被执行。 finally在return方法之前运行。
注：finally不一定被执行，，例如 catch 块中有退出系统的语句 System.exit(-1); finally就不会被执行。
